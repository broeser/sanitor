<?php

namespace Sanitor;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-22 at 12:35:44.
 */
class SanitizerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Sanitizer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Sanitizer(FILTER_SANITIZE_EMAIL);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Sanitor\Sanitizer::getSanitizeFilter
     */
    public function testGetSanitizeFilter() {
        $this->assertEquals(FILTER_SANITIZE_EMAIL, $this->object->getSanitizeFilter());
    }

    /**
     * @covers Sanitor\Sanitizer::getSanitizeFilterName
     */
    public function testGetSanitizeFilterName() {
        $this->assertEquals('email', $this->object->getSanitizeFilterName());
    }

    /**
     * @covers Sanitor\Sanitizer::getSanitizeFlags
     */
    public function testGetSanitizeFlags() {
        $this->assertEquals(FILTER_NULL_ON_FAILURE, $this->object->getSanitizeFlags());
    }

    /**
     * @covers Sanitor\Sanitizer::setSanitizeFilter
     */
    public function testSetSanitizeFilter() {
        $testValue = 'f9';
        $this->assertEquals($testValue, $this->object->filter($testValue));
        $this->object->setSanitizeFilter(FILTER_SANITIZE_NUMBER_INT);
        $this->assertEquals(9, $this->object->filter($testValue));
        $this->assertEquals(FILTER_SANITIZE_NUMBER_INT, $this->object->getSanitizeFilter());
        $this->assertEquals(FILTER_NULL_ON_FAILURE, $this->object->getSanitizeFlags());
    }

    /**
     * @covers Sanitor\Sanitizer::setSanitizeFlags
     */
    public function testSetSanitizeFlags() {
        $testValue = 'f&9';
        $this->object->setSanitizeFilter(FILTER_UNSAFE_RAW);
        $this->assertEquals($testValue, $this->object->filter($testValue));
        $this->object->setSanitizeFlags(FILTER_FLAG_ENCODE_AMP);
        $this->assertEquals('f&#38;9', $this->object->filter($testValue));
        $this->assertEquals(FILTER_FLAG_ENCODE_AMP|FILTER_NULL_ON_FAILURE, $this->object->getSanitizeFlags());
    }

    /**
     * @covers Sanitor\Sanitizer::addSanitizeFlag
     */
    public function testAddSanitizeFlag() {
        $this->assertEquals(FILTER_NULL_ON_FAILURE, $this->object->getSanitizeFlags());
        $this->object->addSanitizeFlag(FILTER_FLAG_ENCODE_AMP);
        $this->assertEquals(FILTER_FLAG_ENCODE_AMP|FILTER_NULL_ON_FAILURE, $this->object->getSanitizeFlags());
        $this->object->addSanitizeFlag(FILTER_FLAG_STRIP_LOW);
        $this->assertEquals(FILTER_FLAG_ENCODE_AMP|FILTER_FLAG_STRIP_LOW|FILTER_NULL_ON_FAILURE, $this->object->getSanitizeFlags());
    }

    /**
     * Email provider, provides email adresses as raw and sanitized values
     * 
     * @return array[]
     */
    public function emailProvider() {
        return array(
            array('@example.org', '@example.org'),
            array('example@', 'example@'),
            array('@@@', '@@@'),
            array('example', 'example'),
            array(false, false),
            array(null, null),
            array(42, 42),
            array('mail@benedict\roeser.de', 'mail@benedictroeser.de'),
            array('valid.mail@example.org', 'valid.mail@example.org'),
            array('f@example.info', 'f@example.info')
        );
    }

    /**
     * @covers Sanitor\Sanitizer::filter
     * @dataProvider emailProvider
     * @param string $rawValue
     * @param string $expectedFilteredValue
     */
    public function testFilter($rawValue, $expectedFilteredValue) {
        $this->assertEquals($expectedFilteredValue, $this->object->filter($rawValue));
    }

    /**
     * @covers Sanitor\Sanitizer::filterPost
     * @todo   Implement testFilterPost().
     */
    public function testFilterPost() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Sanitor\Sanitizer::filterGet
     * @todo   Implement testFilterGet().
     */
    public function testFilterGet() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Sanitor\Sanitizer::filterCookie
     * @todo   Implement testFilterCookie().
     */
    public function testFilterCookie() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Sanitor\Sanitizer::filterServer
     * @todo   Implement testFilterServer().
     */
    public function testFilterServer() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Sanitor\Sanitizer::filterEnv
     * @todo   Implement testFilterEnv().
     */
    public function testFilterEnv() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Sanitor\Sanitizer::filterSession
     * @todo   Implement testFilterSession().
     */
    public function testFilterSession() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Sanitor\Sanitizer::filterRequest
     * @todo   Implement testFilterRequest().
     */
    public function testFilterRequest() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
