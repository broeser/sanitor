{"name":"Sanitor","tagline":"Sanitor is a thin wrapper around PHPs sanitization functions filter_var, filter_input and filter_has_var.","body":"# Sanitor\r\nSanitor is a thin wrapper around PHP's sanitization functions filter_var, filter_input and filter_has_var.\r\n\r\n[![Build Status](https://travis-ci.org/broeser/sanitor.svg?branch=master)](https://travis-ci.org/broeser/sanitor)\r\n[![codecov.io](https://codecov.io/github/broeser/sanitor/coverage.svg?branch=master)](https://codecov.io/github/broeser/sanitor?branch=master)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](http://mit-license.org)\r\n[![SemVer 2.0.0](https://img.shields.io/badge/semver-2.0.0-blue.svg)](http://semver.org/spec/v2.0.0.html)\r\n\r\nLatest stable version: 1.1.1\r\n\r\n## Why?\r\n\r\n- PHP's filter extension is a bit buggy, INPUT_ENV does not work properly, Sanitor can handle it\r\n- PHP's filter extension currently does not support INPUT_SESSION and INPUT_REQUEST, Sanitor does\r\n- PHP's filter extension does not offer object oriented syntax, Sanitor does\r\n- You can build sanitizable data objects with Sanitor\r\n\r\n## Goals\r\n\r\n- Sanitor should be easy to use and easy to learn\r\n- Sanitor should never implement its own fancy filters but just expose PHP's \r\n  built-in filters in OOP-style\r\n\r\n## Installation\r\n\r\nSanitor works with PHP 5.4, 5.5., 5.6 and 7.0.\r\n\r\nThe package can be installed via composer:\r\n\r\n``composer require broeser/sanitor``\r\n\r\n## How to use\r\n\r\n**IMPORTANT:** Sanitor does only sanitization – never try to use it as a\r\nvalidation filter. It will not work as expected.\r\n\r\n### Basic usage _with filter(), filterGet(), filterPost(), filterRequest(), filterCookie() etc._\r\n\r\n```PHP\r\n<?php\r\n/*\r\n * Example 1: Using filter()\r\n */\r\n$value = 'mail@benedictroeser.de';\r\n$sanitizer = new Sanitor\\Sanitizer(FILTER_SANITIZE_EMAIL);\r\n$sanitizedValue = $sanitizer->filter($value);\r\n\r\n/*\r\n * Example 2: Using filterPost()\r\n */\r\n$sanitizer = new Sanitor\\Sanitizer(FILTER_SANITIZE_EMAIL);\r\n$email = $sanitizer->filterPost('email');\r\n```\r\n\r\nThe constructor takes the filter as first argument and, optionally, flags as\r\nsecond argument. The FILTER_NULL_ON_FAILURE-flag, that is used internally is \r\nalways set by default, so you don't have to set it.\r\n\r\nList of important public methods of **Sanitizer**:\r\n\r\n- **filter**($v) – corresponds to filter_var($v)\r\n- **filterCookie**($x) – corresponds to filter_input(INPUT_COOKIE, $x)\r\n- **filterEnv**($x) – an actually working alternative to filter_input(INPUT_ENV, $x)\r\n- **filterGet**($x) – corresponds to filter_input(INPUT_GET, $x)\r\n- **filterHas($type, $y)** – enhanced version of filter_has_var($type, $y)\r\n- **filterPost**($x) – corresponds to filter_input(INPUT_POST, $x)\r\n- **filterRequest**($x) – enhancement to retrieve a filtered value from $_REQUEST\r\n- **filterServer**($x) – corresponds to filter_input(INPUT_SERVER, $x)\r\n- **filterSession**($x) – enhancement to retrieve a filtered value from $_SESSION\r\n\r\nIf something went wrong while trying to filter, a **SanitizationException** is \r\nthrown. If anything else fails (e.g. a parameter was given in a different format\r\nthan expected, a normal \\Exception is thrown.\r\n\r\n### Changing the filter or flag\r\n\r\nWhile usefulness might be debateable, you can change the filter and flags of an\r\nexisting Sanitizer with the **setSanitizeFilter()**, **setSanitizeFlags()** and\r\n**addSanitizeFlag()**-methods.\r\n\r\n### Sanitize objects _with SanitizableInterface and SanitizableTrait or AbstractSanitizable_\r\n\r\nIf you'd like to sanitize objects, just let their class implement \r\nSanitizableInterface and use the SanitizableTrait within them. You have to \r\nimplement **getRawValue()** to return the \"raw\", unfiltered value of your \r\nobject and **getSanitizer()** to return the Sanitizer-class that shall be used \r\nto filter this value:\r\n\r\n```PHP\r\n<?php\r\n/*\r\n * Example 3: Using SanitizableInterface and SanitizableTrait\r\n */\r\nclass Email implements Sanitor\\SanitizableInterface {\r\n   use Sanitor\\SanitizableTrait;\r\n\r\n   public function getRawValue() {\r\n      return 'mail@benedictroeser.de';\r\n   }\r\n\r\n   public function getSanitizer() {\r\n      return new Sanitor\\Sanitizer(FILTER_SANITIZE_EMAIL);\r\n   }\r\n}\r\n\r\n$myEmail = new Email();\r\n$myFilteredEmail = $myEmail->getFilteredValue();\r\n\r\n```\r\n\r\nIn case you prefer extending an abstract class, you can use \r\n**AbstractSanitizable**. That class (partly) implements SanitizableInterface and\r\nuses SanitizableTrait. It already contains a getSanitizer()-method returning \r\n$this->sanitizer, make sure to set it somewhere or override the method.\r\n\r\n## Contributing?\r\n\r\nYes, please!\r\n\r\nSee [CONTRIBUTING.md](https://github.com/broeser/sanitor/blob/master/CONTRIBUTING.md) for details and/or open an issue with your questions.\r\n\r\nPlease note that this project is released with a [Contributor Code of Conduct](https://github.com/broeser/sanitor/blob/master/CODE_OF_CONDUCT.md). \r\nBy participating in this project you agree to abide by its terms.\r\n\r\n\r\n## Sanitor?\r\n\r\nIt is a pun on sanitization / sane / janitor. Probably not a good one, though.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}